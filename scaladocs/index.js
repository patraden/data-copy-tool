Index.PACKAGES = {"dct.akkastreams" : [{"name" : "dct.akkastreams.ClonedSinkFanOutStream", "shortDescription" : "Builds fan-out shape stream out of arbitrary typed Source and Sink.", "members_class" : [{"label" : "stream", "tail" : "(): RunnableGraph[Seq[(Int, SnkMat)]]", "member" : "dct.akkastreams.ClonedSinkFanOutStream.stream", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#stream:akka.stream.scaladsl.RunnableGraph[Seq[(Int,SnkMat)]]", "kind" : "def"}, {"label" : "sinks", "tail" : "(): IndexedSeq[Sink[Out, (Int, SnkMat)]]", "member" : "dct.akkastreams.ClonedSinkFanOutStream.sinks", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#sinks:IndexedSeq[akka.stream.scaladsl.Sink[Out,(Int,SnkMat)]]", "kind" : "def"}, {"member" : "dct.akkastreams.ClonedSinkFanOutStream#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "typeConverter", "tail" : "(): (Out) => In", "member" : "dct.akkastreams.ClonedSinkFanOutStream.typeConverter", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#typeConverter:Out=>In", "kind" : "abstract def"}, {"label" : "sink", "tail" : "(): Sink[In, SnkMat]", "member" : "dct.akkastreams.ClonedSinkFanOutStream.sink", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#sink:akka.stream.scaladsl.Sink[In,SnkMat]", "kind" : "abstract def"}, {"label" : "source", "tail" : "(): Source[Out, SrcMat]", "member" : "dct.akkastreams.ClonedSinkFanOutStream.source", "link" : "dct\/akkastreams\/ClonedSinkFanOutStream.html#source:akka.stream.scaladsl.Source[Out,SrcMat]", "kind" : "abstract def"}], "class" : "dct\/akkastreams\/ClonedSinkFanOutStream.html", "kind" : "class"}, {"name" : "dct.akkastreams.PostgresCopySinkShapeGraph", "shortDescription" : "A GraphStage represents a reusable graph stream processing operator defined for Postgres COPY command.", "object" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html", "members_class" : [{"label" : "shape", "tail" : "(): SinkShape[ByteString]", "member" : "dct.akkastreams.PostgresCopySinkShapeGraph.shape", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#shape:akka.stream.SinkShape[akka.util.ByteString]", "kind" : "def"}, {"label" : "createLogicAndMaterializedValue", "tail" : "(inheritedAttributes: Attributes): (GraphStageLogic, Future[Long])", "member" : "dct.akkastreams.PostgresCopySinkShapeGraph.createLogicAndMaterializedValue", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#createLogicAndMaterializedValue(inheritedAttributes:akka.stream.Attributes):(akka.stream.stage.GraphStageLogic,scala.concurrent.Future[Long])", "kind" : "def"}, {"label" : "initialAttributes", "tail" : "(): Attributes", "member" : "dct.akkastreams.PostgresCopySinkShapeGraph.initialAttributes", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#initialAttributes:akka.stream.Attributes", "kind" : "def"}, {"member" : "dct.akkastreams.PostgresCopySinkShapeGraph#<init>", "error" : "unsupported entity"}, {"label" : "session", "tail" : ": SlickSession", "member" : "dct.akkastreams.PostgresCopySinkShapeGraph.session", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#session:akka.stream.alpakka.slick.scaladsl.SlickSession", "kind" : "implicit val"}, {"label" : "withAttributes", "tail" : "(attr: Attributes): Graph[SinkShape[ByteString], Future[Long]]", "member" : "akka.stream.stage.GraphStageWithMaterializedValue.withAttributes", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#withAttributes(attr:akka.stream.Attributes):akka.stream.Graph[S,M]", "kind" : "final def"}, {"label" : "addAttributes", "tail" : "(attr: Attributes): Graph[SinkShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.addAttributes", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#addAttributes(attr:akka.stream.Attributes):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(dispatcher: String, inputBufferSize: Int): Graph[SinkShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#async(dispatcher:String,inputBufferSize:Int):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(dispatcher: String): Graph[SinkShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#async(dispatcher:String):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(): Graph[SinkShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#async:akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "named", "tail" : "(name: String): Graph[SinkShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.named", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#named(name:String):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "Shape", "tail" : "", "member" : "akka.stream.Graph.Shape", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#Shape=S@scala.annotation.unchecked.uncheckedVariance", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "sinkForSparkSchema", "tail" : "(tableName: String, schema: StructType)(session: SlickSession): Sink[ByteString, Future[Long]]", "member" : "dct.akkastreams.PostgresCopySinkShapeGraph.sinkForSparkSchema", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#sinkForSparkSchema(tableName:String,schema:org.apache.spark.sql.types.StructType)(implicitsession:akka.stream.alpakka.slick.scaladsl.SlickSession):akka.stream.scaladsl.Sink[akka.util.ByteString,scala.concurrent.Future[Long]]", "kind" : "def"}, {"label" : "sink", "tail" : "(tableName: String, columnNames: Seq[String])(session: SlickSession): Sink[ByteString, Future[Long]]", "member" : "dct.akkastreams.PostgresCopySinkShapeGraph.sink", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#sink(tableName:String,columnNames:Seq[String])(implicitsession:akka.stream.alpakka.slick.scaladsl.SlickSession):akka.stream.scaladsl.Sink[akka.util.ByteString,scala.concurrent.Future[Long]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySinkShapeGraph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/akkastreams\/PostgresCopySinkShapeGraph.html", "kind" : "class"}, {"name" : "dct.akkastreams.PostgresCopySourceShapeGraph", "shortDescription" : "A GraphStage represents a reusable graph stream processing operator defined for Postgres COPY command.", "object" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html", "members_class" : [{"label" : "shape", "tail" : "(): SourceShape[ByteString]", "member" : "dct.akkastreams.PostgresCopySourceShapeGraph.shape", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#shape:akka.stream.SourceShape[akka.util.ByteString]", "kind" : "def"}, {"label" : "createLogicAndMaterializedValue", "tail" : "(inheritedAttributes: Attributes): (GraphStageLogic, Future[Long])", "member" : "dct.akkastreams.PostgresCopySourceShapeGraph.createLogicAndMaterializedValue", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#createLogicAndMaterializedValue(inheritedAttributes:akka.stream.Attributes):(akka.stream.stage.GraphStageLogic,scala.concurrent.Future[Long])", "kind" : "def"}, {"label" : "initialAttributes", "tail" : "(): Attributes", "member" : "dct.akkastreams.PostgresCopySourceShapeGraph.initialAttributes", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#initialAttributes:akka.stream.Attributes", "kind" : "def"}, {"member" : "dct.akkastreams.PostgresCopySourceShapeGraph#<init>", "error" : "unsupported entity"}, {"label" : "session", "tail" : ": SlickSession", "member" : "dct.akkastreams.PostgresCopySourceShapeGraph.session", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#session:akka.stream.alpakka.slick.scaladsl.SlickSession", "kind" : "implicit val"}, {"label" : "withAttributes", "tail" : "(attr: Attributes): Graph[SourceShape[ByteString], Future[Long]]", "member" : "akka.stream.stage.GraphStageWithMaterializedValue.withAttributes", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#withAttributes(attr:akka.stream.Attributes):akka.stream.Graph[S,M]", "kind" : "final def"}, {"label" : "addAttributes", "tail" : "(attr: Attributes): Graph[SourceShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.addAttributes", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#addAttributes(attr:akka.stream.Attributes):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(dispatcher: String, inputBufferSize: Int): Graph[SourceShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#async(dispatcher:String,inputBufferSize:Int):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(dispatcher: String): Graph[SourceShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#async(dispatcher:String):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(): Graph[SourceShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#async:akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "named", "tail" : "(name: String): Graph[SourceShape[ByteString], Future[Long]]", "member" : "akka.stream.Graph.named", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#named(name:String):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "Shape", "tail" : "", "member" : "akka.stream.Graph.Shape", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#Shape=S@scala.annotation.unchecked.uncheckedVariance", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "lazySourceForSparkSchema", "tail" : "(tableName: String, schema: StructType)(session: SlickSession): Source[ByteString, Future[Long]]", "member" : "dct.akkastreams.PostgresCopySourceShapeGraph.lazySourceForSparkSchema", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#lazySourceForSparkSchema(tableName:String,schema:org.apache.spark.sql.types.StructType)(implicitsession:akka.stream.alpakka.slick.scaladsl.SlickSession):akka.stream.scaladsl.Source[akka.util.ByteString,scala.concurrent.Future[Long]]", "kind" : "def"}, {"label" : "lazySourceForTable", "tail" : "(tableName: String, columnNames: Seq[String])(session: SlickSession): Source[ByteString, Future[Long]]", "member" : "dct.akkastreams.PostgresCopySourceShapeGraph.lazySourceForTable", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#lazySourceForTable(tableName:String,columnNames:Seq[String])(implicitsession:akka.stream.alpakka.slick.scaladsl.SlickSession):akka.stream.scaladsl.Source[akka.util.ByteString,scala.concurrent.Future[Long]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/PostgresCopySourceShapeGraph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/akkastreams\/PostgresCopySourceShapeGraph.html", "kind" : "class"}, {"name" : "dct.akkastreams.SparkParquetToPGTableStream", "shortDescription" : "Parquet to PostgresSQL stream with ClonedSinkFanOutStream shape.", "object" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html", "members_class" : [{"label" : "typeConverter", "tail" : "(): (Row) => ByteString", "member" : "dct.akkastreams.SparkParquetToPGTableStream.typeConverter", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#typeConverter:org.apache.spark.sql.Row=>akka.util.ByteString", "kind" : "def"}, {"label" : "sink", "tail" : "(): Sink[ByteString, Future[Long]]", "member" : "dct.akkastreams.SparkParquetToPGTableStream.sink", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#sink:akka.stream.scaladsl.Sink[akka.util.ByteString,scala.concurrent.Future[Long]]", "kind" : "def"}, {"label" : "source", "tail" : "(): Source[Row, Future[NotUsed]]", "member" : "dct.akkastreams.SparkParquetToPGTableStream.source", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#source:akka.stream.scaladsl.Source[org.apache.spark.sql.Row,scala.concurrent.Future[akka.NotUsed]]", "kind" : "def"}, {"member" : "dct.akkastreams.SparkParquetToPGTableStream#<init>", "error" : "unsupported entity"}, {"label" : "stream", "tail" : "(): RunnableGraph[Seq[(Int, Future[Long])]]", "member" : "dct.akkastreams.ClonedSinkFanOutStream.stream", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#stream:akka.stream.scaladsl.RunnableGraph[Seq[(Int,SnkMat)]]", "kind" : "def"}, {"label" : "sinks", "tail" : "(): IndexedSeq[Sink[Row, (Int, Future[Long])]]", "member" : "dct.akkastreams.ClonedSinkFanOutStream.sinks", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#sinks:IndexedSeq[akka.stream.scaladsl.Sink[Out,(Int,SnkMat)]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(sparkParquet: SparkParquetTable, targetTable: String)(session: SlickSession): Seq[SparkParquetToPGTableStream]", "member" : "dct.akkastreams.SparkParquetToPGTableStream.apply", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#apply(sparkParquet:dct.spark.SparkParquetTable,targetTable:String)(implicitsession:akka.stream.alpakka.slick.scaladsl.SlickSession):Seq[dct.akkastreams.SparkParquetToPGTableStream]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/SparkParquetToPGTableStream$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/akkastreams\/SparkParquetToPGTableStream.html", "kind" : "class"}, {"name" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph", "shortDescription" : "A GraphStage represents a reusable graph stream processing operator defined for SparkPartitionReader.", "object" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html", "members_class" : [{"label" : "shape", "tail" : "(): SourceShape[Row]", "member" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph.shape", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#shape:akka.stream.SourceShape[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "createLogic", "tail" : "(inheritedAttributes: Attributes): GraphStageLogic", "member" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph.createLogic", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#createLogic(inheritedAttributes:akka.stream.Attributes):akka.stream.stage.GraphStageLogic", "kind" : "def"}, {"label" : "initialAttributes", "tail" : "(): Attributes", "member" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph.initialAttributes", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#initialAttributes:akka.stream.Attributes", "kind" : "def"}, {"label" : "out", "tail" : ": Outlet[Row]", "member" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph.out", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#out:akka.stream.Outlet[org.apache.spark.sql.Row]", "kind" : "val"}, {"member" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph#<init>", "error" : "unsupported entity"}, {"label" : "createLogicAndMaterializedValue", "tail" : "(inheritedAttributes: Attributes): (GraphStageLogic, NotUsed)", "member" : "akka.stream.stage.GraphStage.createLogicAndMaterializedValue", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#createLogicAndMaterializedValue(inheritedAttributes:akka.stream.Attributes):(akka.stream.stage.GraphStageLogic,akka.NotUsed)", "kind" : "final def"}, {"label" : "withAttributes", "tail" : "(attr: Attributes): Graph[SourceShape[Row], NotUsed]", "member" : "akka.stream.stage.GraphStageWithMaterializedValue.withAttributes", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#withAttributes(attr:akka.stream.Attributes):akka.stream.Graph[S,M]", "kind" : "final def"}, {"label" : "addAttributes", "tail" : "(attr: Attributes): Graph[SourceShape[Row], NotUsed]", "member" : "akka.stream.Graph.addAttributes", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#addAttributes(attr:akka.stream.Attributes):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(dispatcher: String, inputBufferSize: Int): Graph[SourceShape[Row], NotUsed]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#async(dispatcher:String,inputBufferSize:Int):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(dispatcher: String): Graph[SourceShape[Row], NotUsed]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#async(dispatcher:String):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "async", "tail" : "(): Graph[SourceShape[Row], NotUsed]", "member" : "akka.stream.Graph.async", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#async:akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "named", "tail" : "(name: String): Graph[SourceShape[Row], NotUsed]", "member" : "akka.stream.Graph.named", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#named(name:String):akka.stream.Graph[S,M]", "kind" : "def"}, {"label" : "Shape", "tail" : "", "member" : "akka.stream.Graph.Shape", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#Shape=S@scala.annotation.unchecked.uncheckedVariance", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "lazyUnfoldedSourceForFile", "tail" : "(file: PartitionedFile, readerInitializer: (PartitionedFile) => SparkPartitionReader): Source[Row, Future[NotUsed]]", "member" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph.lazyUnfoldedSourceForFile", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#lazyUnfoldedSourceForFile(file:org.apache.spark.sql.execution.datasources.PartitionedFile,readerInitializer:org.apache.spark.sql.execution.datasources.PartitionedFile=>dct.spark.SparkPartitionReader):akka.stream.scaladsl.Source[org.apache.spark.sql.Row,scala.concurrent.Future[akka.NotUsed]]", "kind" : "def"}, {"label" : "lazySourceForFile", "tail" : "(file: PartitionedFile, readerInitializer: (PartitionedFile) => SparkPartitionReader): Source[Row, Future[NotUsed]]", "member" : "dct.akkastreams.SparkPartitionReaderSourceShapeGraph.lazySourceForFile", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#lazySourceForFile(file:org.apache.spark.sql.execution.datasources.PartitionedFile,readerInitializer:org.apache.spark.sql.execution.datasources.PartitionedFile=>dct.spark.SparkPartitionReader):akka.stream.scaladsl.Source[org.apache.spark.sql.Row,scala.concurrent.Future[akka.NotUsed]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/akkastreams\/SparkPartitionReaderSourceShapeGraph.html", "kind" : "class"}], "dct.json" : [{"name" : "dct.json.ADFMapping", "shortDescription" : "ADF json mapping file converter and deserializer to spark sql StructType.", "members_case class" : [{"label" : "mappingSchemaAsStructType", "tail" : ": Option[StructType]", "member" : "dct.json.ADFMapping.mappingSchemaAsStructType", "link" : "dct\/json\/ADFMapping.html#mappingSchemaAsStructType:Option[org.apache.spark.sql.types.StructType]", "kind" : "val"}, {"label" : "aliasMap", "tail" : ": Map[String, String]", "member" : "dct.json.ADFMapping.aliasMap", "link" : "dct\/json\/ADFMapping.html#aliasMap:Map[String,String]", "kind" : "val"}, {"member" : "dct.json.ADFMapping#<init>", "error" : "unsupported entity"}, {"label" : "path", "tail" : ": String", "member" : "dct.json.ADFMapping.path", "link" : "dct\/json\/ADFMapping.html#path:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "dct\/json\/ADFMapping.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/json\/ADFMapping.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/json\/ADFMapping.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/json\/ADFMapping.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/json\/ADFMapping.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/json\/ADFMapping.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/json\/ADFMapping.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/json\/ADFMapping.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/json\/ADFMapping.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/json\/ADFMapping.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/json\/ADFMapping.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/json\/ADFMapping.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/json\/ADFMapping.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/json\/ADFMapping.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/json\/ADFMapping.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/json\/ADFMapping.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/json\/ADFMapping.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/json\/ADFMapping.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/json\/ADFMapping.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/json\/ADFMapping.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/json\/ADFMapping.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/json\/ADFMapping.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/json\/ADFMapping.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/json\/ADFMapping.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/json\/ADFMapping.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/json\/ADFMapping.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/json\/ADFMapping.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/json\/ADFMapping.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/json\/ADFMapping.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/json\/ADFMapping.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/json\/ADFMapping.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/json\/ADFMapping.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "dct\/json\/ADFMapping.html", "kind" : "case class"}], "dct.spark" : [{"name" : "dct.spark.Logger", "trait" : "dct\/spark\/package$$Logger.html", "kind" : "trait", "members_trait" : [{"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/spark\/package$$Logger.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/spark\/package$$Logger.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/spark\/package$$Logger.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/spark\/package$$Logger.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/spark\/package$$Logger.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/spark\/package$$Logger.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/spark\/package$$Logger.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/spark\/package$$Logger.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/spark\/package$$Logger.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/spark\/package$$Logger.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/spark\/package$$Logger.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/spark\/package$$Logger.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/spark\/package$$Logger.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): org.slf4j.Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/spark\/package$$Logger.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/spark\/package$$Logger.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/spark\/package$$Logger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/spark\/package$$Logger.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/spark\/package$$Logger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/spark\/package$$Logger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/spark\/package$$Logger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/spark\/package$$Logger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/spark\/package$$Logger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/package$$Logger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/package$$Logger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/package$$Logger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/spark\/package$$Logger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/spark\/package$$Logger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/spark\/package$$Logger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/spark\/package$$Logger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/spark\/package$$Logger.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/spark\/package$$Logger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/spark\/package$$Logger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/spark\/package$$Logger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/spark\/package$$Logger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Spark utility trait for classes that want to log data."}, {"name" : "dct.spark.SparkParquetTable", "shortDescription" : "Parquet read support class as extension of standard ParquetTable.", "members_class" : [{"label" : "splitFilesFilter", "tail" : "(): (Int) => Seq[PartitionedFile]", "member" : "dct.spark.SparkParquetTable.splitFilesFilter", "link" : "dct\/spark\/SparkParquetTable.html#splitFilesFilter:Int=>Seq[org.apache.spark.sql.execution.datasources.PartitionedFile]", "kind" : "def"}, {"label" : "rowReader", "tail" : ": (PartitionedFile) => SparkPartitionReader", "member" : "dct.spark.SparkParquetTable.rowReader", "link" : "dct\/spark\/SparkParquetTable.html#rowReader:org.apache.spark.sql.execution.datasources.PartitionedFile=>dct.spark.SparkPartitionReader", "kind" : "val"}, {"label" : "totalRowsCount", "tail" : "(): Long", "member" : "dct.spark.SparkParquetTable.totalRowsCount", "link" : "dct\/spark\/SparkParquetTable.html#totalRowsCount:Long", "kind" : "def"}, {"label" : "parallelism", "tail" : "(): Int", "member" : "dct.spark.SparkParquetTable.parallelism", "link" : "dct\/spark\/SparkParquetTable.html#parallelism:Int", "kind" : "def"}, {"label" : "dataSchema", "tail" : ": StructType", "member" : "dct.spark.SparkParquetTable.dataSchema", "link" : "dct\/spark\/SparkParquetTable.html#dataSchema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"member" : "dct.spark.SparkParquetTable#<init>", "error" : "unsupported entity"}, {"label" : "options", "tail" : ": CaseInsensitiveStringMap", "member" : "dct.spark.SparkParquetTable.options", "link" : "dct\/spark\/SparkParquetTable.html#options:org.apache.spark.sql.util.CaseInsensitiveStringMap", "kind" : "val"}, {"label" : "userSpecifiedSchema", "tail" : ": Option[StructType]", "member" : "dct.spark.SparkParquetTable.userSpecifiedSchema", "link" : "dct\/spark\/SparkParquetTable.html#userSpecifiedSchema:Option[org.apache.spark.sql.types.StructType]", "kind" : "val"}, {"label" : "paths", "tail" : ": Seq[String]", "member" : "dct.spark.SparkParquetTable.paths", "link" : "dct\/spark\/SparkParquetTable.html#paths:Seq[String]", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "dct.spark.SparkParquetTable.tableName", "link" : "dct\/spark\/SparkParquetTable.html#tableName:String", "kind" : "val"}, {"label" : "formatName", "tail" : "(): String", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.formatName", "link" : "dct\/spark\/SparkParquetTable.html#formatName:String", "kind" : "def"}, {"label" : "supportsDataType", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.supportsDataType", "link" : "dct\/spark\/SparkParquetTable.html#supportsDataType(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "newWriteBuilder", "tail" : "(info: LogicalWriteInfo): WriteBuilder", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.newWriteBuilder", "link" : "dct\/spark\/SparkParquetTable.html#newWriteBuilder(info:org.apache.spark.sql.connector.write.LogicalWriteInfo):org.apache.spark.sql.connector.write.WriteBuilder", "kind" : "def"}, {"label" : "inferSchema", "tail" : "(files: Seq[FileStatus]): Option[StructType]", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.inferSchema", "link" : "dct\/spark\/SparkParquetTable.html#inferSchema(files:Seq[org.apache.hadoop.fs.FileStatus]):Option[org.apache.spark.sql.types.StructType]", "kind" : "def"}, {"label" : "newScanBuilder", "tail" : "(options: CaseInsensitiveStringMap): ParquetScanBuilder", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.newScanBuilder", "link" : "dct\/spark\/SparkParquetTable.html#newScanBuilder(options:org.apache.spark.sql.util.CaseInsensitiveStringMap):org.apache.spark.sql.execution.datasources.v2.parquet.ParquetScanBuilder", "kind" : "def"}, {"label" : "fallbackFileFormat", "tail" : ": Class[_ <: FileFormat]", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.fallbackFileFormat", "link" : "dct\/spark\/SparkParquetTable.html#fallbackFileFormat:Class[_<:org.apache.spark.sql.execution.datasources.FileFormat]", "kind" : "val"}, {"label" : "sparkSession", "tail" : ": SparkSession", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.sparkSession", "link" : "dct\/spark\/SparkParquetTable.html#sparkSession:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.sql.execution.datasources.v2.parquet.ParquetTable.name", "link" : "dct\/spark\/SparkParquetTable.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "dct\/spark\/SparkParquetTable.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "capabilities", "tail" : "(): Set[TableCapability]", "member" : "org.apache.spark.sql.execution.datasources.v2.FileTable.capabilities", "link" : "dct\/spark\/SparkParquetTable.html#capabilities():java.util.Set[org.apache.spark.sql.connector.catalog.TableCapability]", "kind" : "def"}, {"label" : "properties", "tail" : "(): Map[String, String]", "member" : "org.apache.spark.sql.execution.datasources.v2.FileTable.properties", "link" : "dct\/spark\/SparkParquetTable.html#properties():java.util.Map[String,String]", "kind" : "def"}, {"label" : "partitioning", "tail" : "(): Array[Transform]", "member" : "org.apache.spark.sql.execution.datasources.v2.FileTable.partitioning", "link" : "dct\/spark\/SparkParquetTable.html#partitioning():Array[org.apache.spark.sql.connector.expressions.Transform]", "kind" : "def"}, {"label" : "schema", "tail" : ": StructType", "member" : "org.apache.spark.sql.execution.datasources.v2.FileTable.schema", "link" : "dct\/spark\/SparkParquetTable.html#schema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "fileIndex", "tail" : ": PartitioningAwareFileIndex", "member" : "org.apache.spark.sql.execution.datasources.v2.FileTable.fileIndex", "link" : "dct\/spark\/SparkParquetTable.html#fileIndex:org.apache.spark.sql.execution.datasources.PartitioningAwareFileIndex", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/spark\/SparkParquetTable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/spark\/SparkParquetTable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/spark\/SparkParquetTable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/spark\/SparkParquetTable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/spark\/SparkParquetTable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/spark\/SparkParquetTable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/spark\/SparkParquetTable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkParquetTable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkParquetTable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkParquetTable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/spark\/SparkParquetTable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/spark\/SparkParquetTable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/spark\/SparkParquetTable.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/spark\/SparkParquetTable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/spark\/SparkParquetTable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/spark\/SparkParquetTable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/spark\/SparkParquetTable.html", "kind" : "class"}, {"name" : "dct.spark.SparkPartitionReader", "shortDescription" : "Wrapper for spark PartitionReader which returns Row instead of InternalRow.", "members_class" : [{"label" : "close", "tail" : "(): Unit", "member" : "dct.spark.SparkPartitionReader.close", "link" : "dct\/spark\/SparkPartitionReader.html#close():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Row", "member" : "dct.spark.SparkPartitionReader.get", "link" : "dct\/spark\/SparkPartitionReader.html#get():org.apache.spark.sql.Row", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "dct.spark.SparkPartitionReader.next", "link" : "dct\/spark\/SparkPartitionReader.html#next():Boolean", "kind" : "def"}, {"member" : "dct.spark.SparkPartitionReader#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/spark\/SparkPartitionReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/spark\/SparkPartitionReader.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/spark\/SparkPartitionReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/spark\/SparkPartitionReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/spark\/SparkPartitionReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/spark\/SparkPartitionReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/spark\/SparkPartitionReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkPartitionReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkPartitionReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkPartitionReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/spark\/SparkPartitionReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/spark\/SparkPartitionReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/spark\/SparkPartitionReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/spark\/SparkPartitionReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/spark\/SparkPartitionReader.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/spark\/SparkPartitionReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/spark\/SparkPartitionReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/spark\/SparkPartitionReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/spark\/SparkPartitionReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/spark\/SparkPartitionReader.html", "kind" : "class"}, {"name" : "dct.spark.SparkPGSQLUtils", "shortDescription" : "Postgres SQl utility methods to create, alter and drop objects in database.", "object" : "dct\/spark\/SparkPGSQLUtils$.html", "members_object" : [{"label" : "getSchema", "tail" : "(tableName: String)(provider: ConnectionProvider): StructType", "member" : "dct.spark.SparkPGSQLUtils.getSchema", "link" : "dct\/spark\/SparkPGSQLUtils$.html#getSchema(tableName:String)(implicitprovider:dct.slick.ConnectionProvider):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "dropTable", "tail" : "(tableName: String)(provider: ConnectionProvider): Int", "member" : "dct.spark.SparkPGSQLUtils.dropTable", "link" : "dct\/spark\/SparkPGSQLUtils$.html#dropTable(tableName:String)(implicitprovider:dct.slick.ConnectionProvider):Int", "kind" : "def"}, {"label" : "createTable", "tail" : "(fullTableName: String, schemaOpt: Option[StructType], extraOptions: String)(provider: ConnectionProvider): Int", "member" : "dct.spark.SparkPGSQLUtils.createTable", "link" : "dct\/spark\/SparkPGSQLUtils$.html#createTable(fullTableName:String,schemaOpt:Option[org.apache.spark.sql.types.StructType],extraOptions:String)(implicitprovider:dct.slick.ConnectionProvider):Int", "kind" : "def"}, {"label" : "renameTable", "tail" : "(fullTableName: String, newFullTableName: String)(provider: ConnectionProvider): Int", "member" : "dct.spark.SparkPGSQLUtils.renameTable", "link" : "dct\/spark\/SparkPGSQLUtils$.html#renameTable(fullTableName:String,newFullTableName:String)(implicitprovider:dct.slick.ConnectionProvider):Int", "kind" : "def"}, {"label" : "tableExists", "tail" : "(fullTableName: String)(provider: ConnectionProvider): Boolean", "member" : "dct.spark.SparkPGSQLUtils.tableExists", "link" : "dct\/spark\/SparkPGSQLUtils$.html#tableExists(fullTableName:String)(implicitprovider:dct.slick.ConnectionProvider):Boolean", "kind" : "def"}, {"label" : "truncateTable", "tail" : "(fullTableName: String)(provider: ConnectionProvider): Int", "member" : "dct.spark.SparkPGSQLUtils.truncateTable", "link" : "dct\/spark\/SparkPGSQLUtils$.html#truncateTable(fullTableName:String)(implicitprovider:dct.slick.ConnectionProvider):Int", "kind" : "def"}, {"label" : "changeTableSchema", "tail" : "(fullTableName: String, schema: String)(provider: ConnectionProvider): Int", "member" : "dct.spark.SparkPGSQLUtils.changeTableSchema", "link" : "dct\/spark\/SparkPGSQLUtils$.html#changeTableSchema(fullTableName:String,schema:String)(implicitprovider:dct.slick.ConnectionProvider):Int", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/spark\/SparkPGSQLUtils$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/spark\/SparkPGSQLUtils$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/spark\/SparkPGSQLUtils$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): org.slf4j.Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/spark\/SparkPGSQLUtils$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/spark\/SparkPGSQLUtils$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/spark\/SparkPGSQLUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/spark\/SparkPGSQLUtils$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/spark\/SparkPGSQLUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/spark\/SparkPGSQLUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/spark\/SparkPGSQLUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/spark\/SparkPGSQLUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/spark\/SparkPGSQLUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkPGSQLUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkPGSQLUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/SparkPGSQLUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/spark\/SparkPGSQLUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/spark\/SparkPGSQLUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/spark\/SparkPGSQLUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/spark\/SparkPGSQLUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/spark\/SparkPGSQLUtils$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/spark\/SparkPGSQLUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/spark\/SparkPGSQLUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/spark\/SparkPGSQLUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/spark\/SparkPGSQLUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "dct.spark.StructTypeExtra", "shortDescription" : "Compares two StructTypes in terms of name, datatype and nullable flags equality.", "members_class" : [{"label" : "!===", "tail" : "(other: StructType): Boolean", "member" : "dct.spark.StructTypeExtra.!===", "link" : "dct\/spark\/package$$StructTypeExtra.html#!===(other:org.apache.spark.sql.types.StructType):Boolean", "kind" : "def"}, {"member" : "dct.spark.StructTypeExtra#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/spark\/package$$StructTypeExtra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/spark\/package$$StructTypeExtra.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/spark\/package$$StructTypeExtra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/spark\/package$$StructTypeExtra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/spark\/package$$StructTypeExtra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/spark\/package$$StructTypeExtra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/spark\/package$$StructTypeExtra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/package$$StructTypeExtra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/package$$StructTypeExtra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/spark\/package$$StructTypeExtra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/spark\/package$$StructTypeExtra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/spark\/package$$StructTypeExtra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/spark\/package$$StructTypeExtra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/spark\/package$$StructTypeExtra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/spark\/package$$StructTypeExtra.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/spark\/package$$StructTypeExtra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/spark\/package$$StructTypeExtra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/spark\/package$$StructTypeExtra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/spark\/package$$StructTypeExtra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/spark\/package$$StructTypeExtra.html", "kind" : "class"}], "dct" : [{"name" : "dct.CleanTargetException", "shortDescription" : "Streaming wrap up stage exception", "members_class" : [{"member" : "dct.CleanTargetException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/CleanTargetException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/CleanTargetException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/CleanTargetException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/CleanTargetException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/CleanTargetException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/CleanTargetException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/CleanTargetException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/CleanTargetException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/CleanTargetException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/CleanTargetException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/CleanTargetException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/CleanTargetException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/CleanTargetException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/CleanTargetException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/CleanTargetException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/CleanTargetException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/CleanTargetException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/CleanTargetException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/CleanTargetException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/CleanTargetException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CleanTargetException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CleanTargetException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CleanTargetException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/CleanTargetException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/CleanTargetException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/CleanTargetException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/CleanTargetException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/CleanTargetException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/CleanTargetException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/CleanTargetException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/CleanTargetException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/CleanTargetException.html", "kind" : "class"}, {"name" : "dct.CLIConfig", "shortDescription" : "", "object" : "dct\/CLIConfig$.html", "members_object" : [{"label" : "apply", "tail" : "(args: Seq[String]): CLIConfig", "member" : "dct.CLIConfig.apply", "link" : "dct\/CLIConfig$.html#apply(args:Seq[String]):dct.CLIConfig", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "dct.CLIConfig.logger", "link" : "dct\/CLIConfig$.html#logger:org.apache.log4j.Logger", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/CLIConfig$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/CLIConfig$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/CLIConfig$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/CLIConfig$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/CLIConfig$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/CLIConfig$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/CLIConfig$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/CLIConfig$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/CLIConfig$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/CLIConfig$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/CLIConfig$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/CLIConfig$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/CLIConfig$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/CLIConfig$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/CLIConfig$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/CLIConfig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/CLIConfig$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/CLIConfig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/CLIConfig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/CLIConfig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/CLIConfig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/CLIConfig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CLIConfig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CLIConfig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CLIConfig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/CLIConfig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/CLIConfig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/CLIConfig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/CLIConfig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/CLIConfig$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/CLIConfig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/CLIConfig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/CLIConfig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/CLIConfig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "dct.CLIConfig#<init>", "error" : "unsupported entity"}, {"label" : "jdbcURL", "tail" : ": Option[String]", "member" : "dct.CLIConfig.jdbcURL", "link" : "dct\/CLIConfig.html#jdbcURL:Option[String]", "kind" : "val"}, {"label" : "adfMappingFilePath", "tail" : ": Option[String]", "member" : "dct.CLIConfig.adfMappingFilePath", "link" : "dct\/CLIConfig.html#adfMappingFilePath:Option[String]", "kind" : "val"}, {"label" : "parquetFilePath", "tail" : ": String", "member" : "dct.CLIConfig.parquetFilePath", "link" : "dct\/CLIConfig.html#parquetFilePath:String", "kind" : "val"}, {"label" : "sqlTable", "tail" : ": String", "member" : "dct.CLIConfig.sqlTable", "link" : "dct\/CLIConfig.html#sqlTable:String", "kind" : "val"}, {"label" : "mode", "tail" : ": String", "member" : "dct.CLIConfig.mode", "link" : "dct\/CLIConfig.html#mode:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "dct\/CLIConfig.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/CLIConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/CLIConfig.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/CLIConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/CLIConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/CLIConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/CLIConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/CLIConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CLIConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CLIConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/CLIConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/CLIConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/CLIConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/CLIConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/CLIConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/CLIConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/CLIConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "dct\/CLIConfig.html", "kind" : "case class"}, {"name" : "dct.DataCopyException", "shortDescription" : "Super class for all Data-Copy-Tool exceptions", "members_class" : [{"member" : "dct.DataCopyException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/DataCopyException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/DataCopyException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/DataCopyException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/DataCopyException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/DataCopyException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/DataCopyException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/DataCopyException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/DataCopyException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/DataCopyException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/DataCopyException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/DataCopyException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/DataCopyException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/DataCopyException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/DataCopyException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/DataCopyException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/DataCopyException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/DataCopyException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/DataCopyException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/DataCopyException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/DataCopyException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/DataCopyException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/DataCopyException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/DataCopyException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/DataCopyException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/DataCopyException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/DataCopyException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/DataCopyException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/DataCopyException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/DataCopyException.html", "kind" : "class"}, {"name" : "dct.DataCopyStream", "shortDescription" : "Super class for command line copy scenarios end to end.", "members_class" : [{"label" : "execute", "tail" : "(): Unit", "member" : "dct.DataCopyStream.execute", "link" : "dct\/DataCopyStream.html#execute():Unit", "kind" : "def"}, {"member" : "dct.DataCopyStream#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/DataCopyStream.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/DataCopyStream.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/DataCopyStream.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/DataCopyStream.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/DataCopyStream.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/DataCopyStream.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/DataCopyStream.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/DataCopyStream.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/DataCopyStream.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/DataCopyStream.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/DataCopyStream.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/DataCopyStream.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/DataCopyStream.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/DataCopyStream.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/DataCopyStream.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/DataCopyStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/DataCopyStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/DataCopyStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/DataCopyStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/DataCopyStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/DataCopyStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/DataCopyStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/DataCopyStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/DataCopyStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/DataCopyStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/DataCopyStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/DataCopyStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/DataCopyStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/DataCopyStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/DataCopyStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/DataCopyStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "doRecover", "tail" : "(): PartialFunction[Throwable, Future[Unit]]", "member" : "dct.DataCopyStream.doRecover", "link" : "dct\/DataCopyStream.html#doRecover():PartialFunction[Throwable,scala.concurrent.Future[Unit]]", "kind" : "abstract def"}, {"label" : "doAfterStreaming", "tail" : "(): Unit", "member" : "dct.DataCopyStream.doAfterStreaming", "link" : "dct\/DataCopyStream.html#doAfterStreaming():Unit", "kind" : "abstract def"}, {"label" : "doBeforeStreaming", "tail" : "(): Unit", "member" : "dct.DataCopyStream.doBeforeStreaming", "link" : "dct\/DataCopyStream.html#doBeforeStreaming():Unit", "kind" : "abstract def"}, {"label" : "matValuesAggregator", "tail" : ": (Seq[Mat]) => Future[V]", "member" : "dct.DataCopyStream.matValuesAggregator", "link" : "dct\/DataCopyStream.html#matValuesAggregator:Seq[Mat]=>scala.concurrent.Future[V]", "kind" : "abstract val"}, {"label" : "expectedMetaData", "tail" : ": Try[V]", "member" : "dct.DataCopyStream.expectedMetaData", "link" : "dct\/DataCopyStream.html#expectedMetaData:scala.util.Try[V]", "kind" : "abstract val"}, {"label" : "streams", "tail" : ": Try[Seq[RunnableGraph[Mat]]]", "member" : "dct.DataCopyStream.streams", "link" : "dct\/DataCopyStream.html#streams:scala.util.Try[Seq[akka.stream.scaladsl.RunnableGraph[Mat]]]", "kind" : "abstract val"}, {"label" : "ex", "tail" : ": ExecutionContext", "member" : "dct.DataCopyStream.ex", "link" : "dct\/DataCopyStream.html#ex:scala.concurrent.ExecutionContext", "kind" : "implicit abstract val"}, {"label" : "sys", "tail" : ": ActorSystem", "member" : "dct.DataCopyStream.sys", "link" : "dct\/DataCopyStream.html#sys:akka.actor.ActorSystem", "kind" : "implicit abstract val"}], "class" : "dct\/DataCopyStream.html", "kind" : "class"}, {"name" : "dct.DataCopyTool", "shortDescription" : "", "object" : "dct\/DataCopyTool$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "dct\/DataCopyTool$.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "delayedInit", "tail" : "(body: => Unit): Unit", "member" : "scala.App.delayedInit", "link" : "dct\/DataCopyTool$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "dct\/DataCopyTool$.html#args:Array[String]", "kind" : "final def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "dct\/DataCopyTool$.html#executionStart:Long", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/DataCopyTool$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/DataCopyTool$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/DataCopyTool$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/DataCopyTool$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/DataCopyTool$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/DataCopyTool$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/DataCopyTool$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyTool$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyTool$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/DataCopyTool$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/DataCopyTool$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/DataCopyTool$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/DataCopyTool$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/DataCopyTool$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/DataCopyTool$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/DataCopyTool$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/DataCopyTool$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/DataCopyTool$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/DataCopyTool$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "dct.FutureOps", "shortDescription" : "Future implicit extension to TransactFuture.", "members_class" : [{"label" : "rollbackWith", "tail" : "(rollback: PartialFunction[Throwable, Future[Unit]], sys: ActorSystem): TransactFuture[T]", "member" : "dct.FutureOps.rollbackWith", "link" : "dct\/package$$FutureOps.html#rollbackWith(rollback:PartialFunction[Throwable,scala.concurrent.Future[Unit]],sys:akka.actor.ActorSystem):dct.package.TransactFuture[T]", "kind" : "def"}, {"member" : "dct.FutureOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/package$$FutureOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/package$$FutureOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/package$$FutureOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/package$$FutureOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/package$$FutureOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/package$$FutureOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/package$$FutureOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/package$$FutureOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/package$$FutureOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/package$$FutureOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/package$$FutureOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/package$$FutureOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/package$$FutureOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/package$$FutureOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/package$$FutureOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/package$$FutureOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/package$$FutureOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/package$$FutureOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/package$$FutureOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/package$$FutureOps.html", "kind" : "class"}, {"name" : "dct.ParquetToPGCreate", "shortDescription" : "ParquetToPGStream implementation for \"Create target table\" scenario.", "members_class" : [{"label" : "doAfterStreaming", "tail" : "(): Unit", "member" : "dct.ParquetToPGCreate.doAfterStreaming", "link" : "dct\/ParquetToPGCreate.html#doAfterStreaming():Unit", "kind" : "def"}, {"label" : "doRecover", "tail" : "(): PartialFunction[Throwable, Future[Unit]]", "member" : "dct.ParquetToPGCreate.doRecover", "link" : "dct\/ParquetToPGCreate.html#doRecover():PartialFunction[Throwable,scala.concurrent.Future[Unit]]", "kind" : "def"}, {"label" : "doBeforeStreaming", "tail" : "(): Unit", "member" : "dct.ParquetToPGCreate.doBeforeStreaming", "link" : "dct\/ParquetToPGCreate.html#doBeforeStreaming():Unit", "kind" : "def"}, {"member" : "dct.ParquetToPGCreate#<init>", "error" : "unsupported entity"}, {"label" : "sparkTable", "tail" : ": SparkParquetTable", "member" : "dct.ParquetToPGStream.sparkTable", "link" : "dct\/ParquetToPGCreate.html#sparkTable:dct.spark.SparkParquetTable", "kind" : "lazy val"}, {"label" : "streams", "tail" : ": Try[Seq[RunnableGraph[Seq[(Int, Future[Long])]]]]", "member" : "dct.ParquetToPGStream.streams", "link" : "dct\/ParquetToPGCreate.html#streams:scala.util.Try[Seq[akka.stream.scaladsl.RunnableGraph[Seq[(Int,scala.concurrent.Future[Long])]]]]", "kind" : "val"}, {"label" : "expectedMetaData", "tail" : ": Try[Long]", "member" : "dct.ParquetToPGStream.expectedMetaData", "link" : "dct\/ParquetToPGCreate.html#expectedMetaData:scala.util.Try[Long]", "kind" : "val"}, {"label" : "matValuesAggregator", "tail" : ": (Seq[Seq[(Int, Future[Long])]]) => Future[Long]", "member" : "dct.ParquetToPGStream.matValuesAggregator", "link" : "dct\/ParquetToPGCreate.html#matValuesAggregator:Seq[Seq[(Int,scala.concurrent.Future[Long])]]=>scala.concurrent.Future[Long]", "kind" : "val"}, {"label" : "tempTableName", "tail" : ": String", "member" : "dct.ParquetToPGStream.tempTableName", "link" : "dct\/ParquetToPGCreate.html#tempTableName:String", "kind" : "val"}, {"label" : "tempSchema", "tail" : ": String", "member" : "dct.ParquetToPGStream.tempSchema", "link" : "dct\/ParquetToPGCreate.html#tempSchema:String", "kind" : "val"}, {"label" : "targetTableName", "tail" : ": String", "member" : "dct.ParquetToPGStream.targetTableName", "link" : "dct\/ParquetToPGCreate.html#targetTableName:String", "kind" : "val"}, {"label" : "targetSchema", "tail" : ": String", "member" : "dct.ParquetToPGStream.targetSchema", "link" : "dct\/ParquetToPGCreate.html#targetSchema:String", "kind" : "val"}, {"label" : "provider", "tail" : ": ConnectionProvider", "member" : "dct.ParquetToPGStream.provider", "link" : "dct\/ParquetToPGCreate.html#provider:dct.slick.ConnectionProvider", "kind" : "implicit val"}, {"label" : "session", "tail" : ": SlickSession", "member" : "dct.ParquetToPGStream.session", "link" : "dct\/ParquetToPGCreate.html#session:akka.stream.alpakka.slick.javadsl.SlickSession", "kind" : "implicit val"}, {"label" : "sys", "tail" : ": ActorSystem", "member" : "dct.ParquetToPGStream.sys", "link" : "dct\/ParquetToPGCreate.html#sys:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "ex", "tail" : ": ExecutionContext", "member" : "dct.ParquetToPGStream.ex", "link" : "dct\/ParquetToPGCreate.html#ex:scala.concurrent.ExecutionContext", "kind" : "implicit val"}, {"label" : "execute", "tail" : "(): Unit", "member" : "dct.DataCopyStream.execute", "link" : "dct\/ParquetToPGCreate.html#execute():Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/ParquetToPGCreate.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/ParquetToPGCreate.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/ParquetToPGCreate.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/ParquetToPGCreate.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/ParquetToPGCreate.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/ParquetToPGCreate.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/ParquetToPGCreate.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/ParquetToPGCreate.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/ParquetToPGCreate.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/ParquetToPGCreate.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/ParquetToPGCreate.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/ParquetToPGCreate.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/ParquetToPGCreate.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/ParquetToPGCreate.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/ParquetToPGCreate.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/ParquetToPGCreate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/ParquetToPGCreate.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/ParquetToPGCreate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/ParquetToPGCreate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/ParquetToPGCreate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/ParquetToPGCreate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/ParquetToPGCreate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGCreate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGCreate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGCreate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/ParquetToPGCreate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/ParquetToPGCreate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/ParquetToPGCreate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/ParquetToPGCreate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/ParquetToPGCreate.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/ParquetToPGCreate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/ParquetToPGCreate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/ParquetToPGCreate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/ParquetToPGCreate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/ParquetToPGCreate.html", "kind" : "class"}, {"name" : "dct.ParquetToPGOverwrite", "shortDescription" : "ParquetToPGStream implementation for \"Overwrite target table\" scenario.", "members_class" : [{"label" : "doAfterStreaming", "tail" : "(): Unit", "member" : "dct.ParquetToPGOverwrite.doAfterStreaming", "link" : "dct\/ParquetToPGOverwrite.html#doAfterStreaming():Unit", "kind" : "def"}, {"label" : "doRecover", "tail" : "(): PartialFunction[Throwable, Future[Unit]]", "member" : "dct.ParquetToPGOverwrite.doRecover", "link" : "dct\/ParquetToPGOverwrite.html#doRecover():PartialFunction[Throwable,scala.concurrent.Future[Unit]]", "kind" : "def"}, {"label" : "doBeforeStreaming", "tail" : "(): Unit", "member" : "dct.ParquetToPGOverwrite.doBeforeStreaming", "link" : "dct\/ParquetToPGOverwrite.html#doBeforeStreaming():Unit", "kind" : "def"}, {"member" : "dct.ParquetToPGOverwrite#<init>", "error" : "unsupported entity"}, {"label" : "sparkTable", "tail" : ": SparkParquetTable", "member" : "dct.ParquetToPGStream.sparkTable", "link" : "dct\/ParquetToPGOverwrite.html#sparkTable:dct.spark.SparkParquetTable", "kind" : "lazy val"}, {"label" : "streams", "tail" : ": Try[Seq[RunnableGraph[Seq[(Int, Future[Long])]]]]", "member" : "dct.ParquetToPGStream.streams", "link" : "dct\/ParquetToPGOverwrite.html#streams:scala.util.Try[Seq[akka.stream.scaladsl.RunnableGraph[Seq[(Int,scala.concurrent.Future[Long])]]]]", "kind" : "val"}, {"label" : "expectedMetaData", "tail" : ": Try[Long]", "member" : "dct.ParquetToPGStream.expectedMetaData", "link" : "dct\/ParquetToPGOverwrite.html#expectedMetaData:scala.util.Try[Long]", "kind" : "val"}, {"label" : "matValuesAggregator", "tail" : ": (Seq[Seq[(Int, Future[Long])]]) => Future[Long]", "member" : "dct.ParquetToPGStream.matValuesAggregator", "link" : "dct\/ParquetToPGOverwrite.html#matValuesAggregator:Seq[Seq[(Int,scala.concurrent.Future[Long])]]=>scala.concurrent.Future[Long]", "kind" : "val"}, {"label" : "tempTableName", "tail" : ": String", "member" : "dct.ParquetToPGStream.tempTableName", "link" : "dct\/ParquetToPGOverwrite.html#tempTableName:String", "kind" : "val"}, {"label" : "tempSchema", "tail" : ": String", "member" : "dct.ParquetToPGStream.tempSchema", "link" : "dct\/ParquetToPGOverwrite.html#tempSchema:String", "kind" : "val"}, {"label" : "targetTableName", "tail" : ": String", "member" : "dct.ParquetToPGStream.targetTableName", "link" : "dct\/ParquetToPGOverwrite.html#targetTableName:String", "kind" : "val"}, {"label" : "targetSchema", "tail" : ": String", "member" : "dct.ParquetToPGStream.targetSchema", "link" : "dct\/ParquetToPGOverwrite.html#targetSchema:String", "kind" : "val"}, {"label" : "provider", "tail" : ": ConnectionProvider", "member" : "dct.ParquetToPGStream.provider", "link" : "dct\/ParquetToPGOverwrite.html#provider:dct.slick.ConnectionProvider", "kind" : "implicit val"}, {"label" : "session", "tail" : ": SlickSession", "member" : "dct.ParquetToPGStream.session", "link" : "dct\/ParquetToPGOverwrite.html#session:akka.stream.alpakka.slick.javadsl.SlickSession", "kind" : "implicit val"}, {"label" : "sys", "tail" : ": ActorSystem", "member" : "dct.ParquetToPGStream.sys", "link" : "dct\/ParquetToPGOverwrite.html#sys:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "ex", "tail" : ": ExecutionContext", "member" : "dct.ParquetToPGStream.ex", "link" : "dct\/ParquetToPGOverwrite.html#ex:scala.concurrent.ExecutionContext", "kind" : "implicit val"}, {"label" : "execute", "tail" : "(): Unit", "member" : "dct.DataCopyStream.execute", "link" : "dct\/ParquetToPGOverwrite.html#execute():Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/ParquetToPGOverwrite.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/ParquetToPGOverwrite.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/ParquetToPGOverwrite.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/ParquetToPGOverwrite.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/ParquetToPGOverwrite.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/ParquetToPGOverwrite.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/ParquetToPGOverwrite.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/ParquetToPGOverwrite.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/ParquetToPGOverwrite.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/ParquetToPGOverwrite.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/ParquetToPGOverwrite.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/ParquetToPGOverwrite.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/ParquetToPGOverwrite.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/ParquetToPGOverwrite.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/ParquetToPGOverwrite.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/ParquetToPGOverwrite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/ParquetToPGOverwrite.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/ParquetToPGOverwrite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/ParquetToPGOverwrite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/ParquetToPGOverwrite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/ParquetToPGOverwrite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/ParquetToPGOverwrite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGOverwrite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGOverwrite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGOverwrite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/ParquetToPGOverwrite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/ParquetToPGOverwrite.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/ParquetToPGOverwrite.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/ParquetToPGOverwrite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/ParquetToPGOverwrite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/ParquetToPGOverwrite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/ParquetToPGOverwrite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/ParquetToPGOverwrite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/ParquetToPGOverwrite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/ParquetToPGOverwrite.html", "kind" : "class"}, {"name" : "dct.ParquetToPGStream", "shortDescription" : "DataCopyStream to copy parquet file to PostgreSQL table.", "members_class" : [{"label" : "sparkTable", "tail" : ": SparkParquetTable", "member" : "dct.ParquetToPGStream.sparkTable", "link" : "dct\/ParquetToPGStream.html#sparkTable:dct.spark.SparkParquetTable", "kind" : "lazy val"}, {"label" : "streams", "tail" : ": Try[Seq[RunnableGraph[Seq[(Int, Future[Long])]]]]", "member" : "dct.ParquetToPGStream.streams", "link" : "dct\/ParquetToPGStream.html#streams:scala.util.Try[Seq[akka.stream.scaladsl.RunnableGraph[Seq[(Int,scala.concurrent.Future[Long])]]]]", "kind" : "val"}, {"label" : "expectedMetaData", "tail" : ": Try[Long]", "member" : "dct.ParquetToPGStream.expectedMetaData", "link" : "dct\/ParquetToPGStream.html#expectedMetaData:scala.util.Try[Long]", "kind" : "val"}, {"label" : "matValuesAggregator", "tail" : ": (Seq[Seq[(Int, Future[Long])]]) => Future[Long]", "member" : "dct.ParquetToPGStream.matValuesAggregator", "link" : "dct\/ParquetToPGStream.html#matValuesAggregator:Seq[Seq[(Int,scala.concurrent.Future[Long])]]=>scala.concurrent.Future[Long]", "kind" : "val"}, {"label" : "tempTableName", "tail" : ": String", "member" : "dct.ParquetToPGStream.tempTableName", "link" : "dct\/ParquetToPGStream.html#tempTableName:String", "kind" : "val"}, {"label" : "tempSchema", "tail" : ": String", "member" : "dct.ParquetToPGStream.tempSchema", "link" : "dct\/ParquetToPGStream.html#tempSchema:String", "kind" : "val"}, {"label" : "targetTableName", "tail" : ": String", "member" : "dct.ParquetToPGStream.targetTableName", "link" : "dct\/ParquetToPGStream.html#targetTableName:String", "kind" : "val"}, {"label" : "targetSchema", "tail" : ": String", "member" : "dct.ParquetToPGStream.targetSchema", "link" : "dct\/ParquetToPGStream.html#targetSchema:String", "kind" : "val"}, {"label" : "provider", "tail" : ": ConnectionProvider", "member" : "dct.ParquetToPGStream.provider", "link" : "dct\/ParquetToPGStream.html#provider:dct.slick.ConnectionProvider", "kind" : "implicit val"}, {"label" : "session", "tail" : ": SlickSession", "member" : "dct.ParquetToPGStream.session", "link" : "dct\/ParquetToPGStream.html#session:akka.stream.alpakka.slick.javadsl.SlickSession", "kind" : "implicit val"}, {"label" : "sys", "tail" : ": ActorSystem", "member" : "dct.ParquetToPGStream.sys", "link" : "dct\/ParquetToPGStream.html#sys:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "ex", "tail" : ": ExecutionContext", "member" : "dct.ParquetToPGStream.ex", "link" : "dct\/ParquetToPGStream.html#ex:scala.concurrent.ExecutionContext", "kind" : "implicit val"}, {"member" : "dct.ParquetToPGStream#<init>", "error" : "unsupported entity"}, {"label" : "execute", "tail" : "(): Unit", "member" : "dct.DataCopyStream.execute", "link" : "dct\/ParquetToPGStream.html#execute():Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/ParquetToPGStream.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/ParquetToPGStream.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/ParquetToPGStream.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/ParquetToPGStream.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/ParquetToPGStream.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/ParquetToPGStream.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/ParquetToPGStream.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/ParquetToPGStream.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/ParquetToPGStream.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/ParquetToPGStream.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/ParquetToPGStream.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/ParquetToPGStream.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/ParquetToPGStream.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/ParquetToPGStream.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/ParquetToPGStream.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/ParquetToPGStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/ParquetToPGStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/ParquetToPGStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/ParquetToPGStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/ParquetToPGStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/ParquetToPGStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/ParquetToPGStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/ParquetToPGStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/ParquetToPGStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/ParquetToPGStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/ParquetToPGStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/ParquetToPGStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/ParquetToPGStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/ParquetToPGStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/ParquetToPGStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/ParquetToPGStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/ParquetToPGStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "doRecover", "tail" : "(): PartialFunction[Throwable, Future[Unit]]", "member" : "dct.DataCopyStream.doRecover", "link" : "dct\/ParquetToPGStream.html#doRecover():PartialFunction[Throwable,scala.concurrent.Future[Unit]]", "kind" : "abstract def"}, {"label" : "doAfterStreaming", "tail" : "(): Unit", "member" : "dct.DataCopyStream.doAfterStreaming", "link" : "dct\/ParquetToPGStream.html#doAfterStreaming():Unit", "kind" : "abstract def"}, {"label" : "doBeforeStreaming", "tail" : "(): Unit", "member" : "dct.DataCopyStream.doBeforeStreaming", "link" : "dct\/ParquetToPGStream.html#doBeforeStreaming():Unit", "kind" : "abstract def"}], "class" : "dct\/ParquetToPGStream.html", "kind" : "class"}, {"name" : "dct.RenameTempToTargetException", "shortDescription" : "Streaming wrap up stage exception", "members_class" : [{"member" : "dct.RenameTempToTargetException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/RenameTempToTargetException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/RenameTempToTargetException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/RenameTempToTargetException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/RenameTempToTargetException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/RenameTempToTargetException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/RenameTempToTargetException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/RenameTempToTargetException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/RenameTempToTargetException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/RenameTempToTargetException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/RenameTempToTargetException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/RenameTempToTargetException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/RenameTempToTargetException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/RenameTempToTargetException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/RenameTempToTargetException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/RenameTempToTargetException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/RenameTempToTargetException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/RenameTempToTargetException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/RenameTempToTargetException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/RenameTempToTargetException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/RenameTempToTargetException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/RenameTempToTargetException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/RenameTempToTargetException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/RenameTempToTargetException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/RenameTempToTargetException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/RenameTempToTargetException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/RenameTempToTargetException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/RenameTempToTargetException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/RenameTempToTargetException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/RenameTempToTargetException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/RenameTempToTargetException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/RenameTempToTargetException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/RenameTempToTargetException.html", "kind" : "class"}, {"name" : "dct.StreamException", "shortDescription" : "Streaming stage exception", "members_class" : [{"member" : "dct.StreamException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/StreamException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/StreamException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/StreamException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/StreamException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/StreamException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/StreamException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/StreamException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/StreamException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/StreamException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/StreamException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/StreamException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/StreamException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/StreamException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/StreamException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/StreamException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/StreamException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/StreamException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/StreamException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/StreamException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/StreamException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/StreamException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/StreamException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/StreamException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/StreamException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/StreamException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/StreamException.html", "kind" : "class"}, {"name" : "dct.StreamInitializationException", "shortDescription" : "Streaming initialization stage exception", "members_class" : [{"member" : "dct.StreamInitializationException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/StreamInitializationException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/StreamInitializationException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/StreamInitializationException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/StreamInitializationException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/StreamInitializationException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamInitializationException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamInitializationException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamInitializationException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/StreamInitializationException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/StreamInitializationException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/StreamInitializationException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/StreamInitializationException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/StreamInitializationException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/StreamInitializationException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/StreamInitializationException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/StreamInitializationException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/StreamInitializationException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/StreamInitializationException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/StreamInitializationException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/StreamInitializationException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamInitializationException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamInitializationException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamInitializationException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/StreamInitializationException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/StreamInitializationException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/StreamInitializationException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/StreamInitializationException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/StreamInitializationException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/StreamInitializationException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/StreamInitializationException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/StreamInitializationException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/StreamInitializationException.html", "kind" : "class"}, {"name" : "dct.StreamMetaDataAssertionException", "shortDescription" : "Streaming stage exception", "members_class" : [{"member" : "dct.StreamMetaDataAssertionException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/StreamMetaDataAssertionException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/StreamMetaDataAssertionException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/StreamMetaDataAssertionException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/StreamMetaDataAssertionException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/StreamMetaDataAssertionException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamMetaDataAssertionException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamMetaDataAssertionException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamMetaDataAssertionException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/StreamMetaDataAssertionException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/StreamMetaDataAssertionException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/StreamMetaDataAssertionException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/StreamMetaDataAssertionException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/StreamMetaDataAssertionException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/StreamMetaDataAssertionException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/StreamMetaDataAssertionException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/StreamMetaDataAssertionException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/StreamMetaDataAssertionException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/StreamMetaDataAssertionException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/StreamMetaDataAssertionException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/StreamMetaDataAssertionException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamMetaDataAssertionException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamMetaDataAssertionException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamMetaDataAssertionException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/StreamMetaDataAssertionException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/StreamMetaDataAssertionException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/StreamMetaDataAssertionException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/StreamMetaDataAssertionException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/StreamMetaDataAssertionException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/StreamMetaDataAssertionException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/StreamMetaDataAssertionException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/StreamMetaDataAssertionException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/StreamMetaDataAssertionException.html", "kind" : "class"}, {"name" : "dct.StreamRollbackException", "shortDescription" : "Streaming rollback exception", "members_class" : [{"member" : "dct.StreamRollbackException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/StreamRollbackException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/StreamRollbackException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/StreamRollbackException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/StreamRollbackException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/StreamRollbackException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamRollbackException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamRollbackException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamRollbackException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/StreamRollbackException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/StreamRollbackException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/StreamRollbackException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/StreamRollbackException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/StreamRollbackException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/StreamRollbackException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/StreamRollbackException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/StreamRollbackException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/StreamRollbackException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/StreamRollbackException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/StreamRollbackException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/StreamRollbackException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamRollbackException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamRollbackException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamRollbackException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/StreamRollbackException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/StreamRollbackException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/StreamRollbackException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/StreamRollbackException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/StreamRollbackException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/StreamRollbackException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/StreamRollbackException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/StreamRollbackException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/StreamRollbackException.html", "kind" : "class"}, {"name" : "dct.StreamWrappingException", "shortDescription" : "Streaming wrap up stage exception", "members_class" : [{"member" : "dct.StreamWrappingException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "dct\/StreamWrappingException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "dct\/StreamWrappingException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "dct\/StreamWrappingException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "dct\/StreamWrappingException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "dct\/StreamWrappingException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamWrappingException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamWrappingException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "dct\/StreamWrappingException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "dct\/StreamWrappingException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "dct\/StreamWrappingException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "dct\/StreamWrappingException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "dct\/StreamWrappingException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "dct\/StreamWrappingException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/StreamWrappingException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/StreamWrappingException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/StreamWrappingException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/StreamWrappingException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/StreamWrappingException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/StreamWrappingException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/StreamWrappingException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamWrappingException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamWrappingException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/StreamWrappingException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/StreamWrappingException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/StreamWrappingException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/StreamWrappingException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/StreamWrappingException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/StreamWrappingException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/StreamWrappingException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/StreamWrappingException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/StreamWrappingException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/StreamWrappingException.html", "kind" : "class"}, {"name" : "dct.TransactFuture", "shortDescription" : "Extended Future implicit with \"transactional\" recovery and verbose logging.", "members_class" : [{"label" : "flatMap", "tail" : "(f: (T) => Future[S])(executor: ExecutionContext): Future[S]", "member" : "dct.TransactFuture.flatMap", "link" : "dct\/package$$TransactFuture.html#flatMap[S](f:T=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"member" : "dct.TransactFuture#<init>", "error" : "unsupported entity"}, {"label" : "sys", "tail" : ": ActorSystem", "member" : "dct.TransactFuture.sys", "link" : "dct\/package$$TransactFuture.html#sys:akka.actor.ActorSystem", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/package$$TransactFuture.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "dct\/package$$TransactFuture.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "dct\/package$$TransactFuture.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/package$$TransactFuture.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/package$$TransactFuture.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/package$$TransactFuture.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/package$$TransactFuture.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/package$$TransactFuture.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "dct\/package$$TransactFuture.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "dct\/package$$TransactFuture.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "dct\/package$$TransactFuture.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "dct\/package$$TransactFuture.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: => String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "dct\/package$$TransactFuture.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "dct\/package$$TransactFuture.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "dct\/package$$TransactFuture.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/package$$TransactFuture.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/package$$TransactFuture.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/package$$TransactFuture.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/package$$TransactFuture.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/package$$TransactFuture.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/package$$TransactFuture.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/package$$TransactFuture.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/package$$TransactFuture.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/package$$TransactFuture.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/package$$TransactFuture.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/package$$TransactFuture.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/package$$TransactFuture.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/package$$TransactFuture.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/package$$TransactFuture.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/package$$TransactFuture.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/package$$TransactFuture.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/package$$TransactFuture.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/package$$TransactFuture.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/package$$TransactFuture.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "dct\/package$$TransactFuture.html", "kind" : "class"}], "dct.slick" : [{"name" : "dct.slick.ConnectionProvider", "object" : "dct\/slick\/ConnectionProvider$.html", "members_object" : [{"label" : "apply", "tail" : "()(slickSession: SlickSession): ConnectionProvider", "member" : "dct.slick.ConnectionProvider.apply", "link" : "dct\/slick\/ConnectionProvider$.html#apply()(implicitslickSession:akka.stream.alpakka.slick.scaladsl.SlickSession):dct.slick.ConnectionProvider", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/slick\/ConnectionProvider$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/slick\/ConnectionProvider$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/slick\/ConnectionProvider$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/slick\/ConnectionProvider$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/slick\/ConnectionProvider$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/slick\/ConnectionProvider$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/slick\/ConnectionProvider$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/slick\/ConnectionProvider$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/slick\/ConnectionProvider$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/slick\/ConnectionProvider$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/slick\/ConnectionProvider$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/slick\/ConnectionProvider$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/slick\/ConnectionProvider$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/slick\/ConnectionProvider$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/slick\/ConnectionProvider$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/slick\/ConnectionProvider$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/slick\/ConnectionProvider$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/slick\/ConnectionProvider$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/slick\/ConnectionProvider$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "dct\/slick\/ConnectionProvider.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "dct\/slick\/ConnectionProvider.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "dct\/slick\/ConnectionProvider.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "dct\/slick\/ConnectionProvider.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "dct\/slick\/ConnectionProvider.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "dct\/slick\/ConnectionProvider.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "dct\/slick\/ConnectionProvider.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "dct\/slick\/ConnectionProvider.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/slick\/ConnectionProvider.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/slick\/ConnectionProvider.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "dct\/slick\/ConnectionProvider.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "dct\/slick\/ConnectionProvider.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "dct\/slick\/ConnectionProvider.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "dct\/slick\/ConnectionProvider.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "dct\/slick\/ConnectionProvider.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "dct\/slick\/ConnectionProvider.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "dct\/slick\/ConnectionProvider.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "dct\/slick\/ConnectionProvider.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "dct\/slick\/ConnectionProvider.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "dct\/slick\/ConnectionProvider.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "release", "tail" : "(exOpt: Option[Throwable]): Unit", "member" : "dct.slick.ConnectionProvider.release", "link" : "dct\/slick\/ConnectionProvider.html#release(exOpt:Option[Throwable]):Unit", "kind" : "abstract def"}, {"label" : "acquire", "tail" : "(): Try[PGConnection]", "member" : "dct.slick.ConnectionProvider.acquire", "link" : "dct\/slick\/ConnectionProvider.html#acquire():scala.util.Try[org.postgresql.PGConnection]", "kind" : "abstract def"}, {"label" : "acquireBase", "tail" : "(): Try[Connection]", "member" : "dct.slick.ConnectionProvider.acquireBase", "link" : "dct\/slick\/ConnectionProvider.html#acquireBase():scala.util.Try[java.sql.Connection]", "kind" : "abstract def"}], "shortDescription" : "Generic connection provider capable to provide base Java and alternative PosgresSQL JDBC connections."}]};